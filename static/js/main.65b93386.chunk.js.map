{"version":3,"sources":["OptionsContext.js","Inputs.js","Navbar.js","OptionSummary.js","App.js","serviceWorker.js","index.js"],"names":["OptionsContext","createContext","OptionsProvider","props","useState","name","setName","price","setPrice","amountOfOptions","setAmountOfOptions","totalAmountSpent","setTotalAmountSpent","listOfOptions","setListOfOptions","uuidv1","id","setId","amountOfOptionsSold","setAmountOfOptionsSold","optionPriceSoldAt","setOptionPriceSoldAt","totalProfit","setTotalProfit","totalReturn","setTotalReturn","newTable","setNewTable","winTrades","setWinTrades","loseTrades","setLoseTrades","winPercents","setWinPercents","value","losePercents","setLosePercents","Provider","children","Inputs","lists","clock","Date","toLocaleDateString","useContext","e","alertOverOptions","getInputValue","hookSetter","target","addListOfOptions","useEffect","getOptions","localStorage","getItem","JSON","parse","setItem","stringify","className","onSubmit","preventDefault","reset","type","placeholder","onChange","map","option","key","title","onClick","deleteItem","filter","deleteOption","toUpperCase","toFixed","style","color","Navbar","newProfitArr","i","length","push","reduce","accumulator","currentValue","isNaN","getTotal","document","querySelector","classList","toggle","OptionSummary","options","width","height","chartType","loader","data","legend","textStyle","fontSize","titleTextStyle","fontName","size","backgroundColor","colors","fontFamily","is3D","rootProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65b93386.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\n\r\n\r\n\r\nexport const OptionsContext = createContext();\r\n\r\n\r\nexport const OptionsProvider = props => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState(0);\r\n    const [amountOfOptions, setAmountOfOptions] = useState(0);\r\n    const [totalAmountSpent, setTotalAmountSpent] = useState(0);\r\n    const [listOfOptions, setListOfOptions] = useState([]);\r\n    const [id, setId] = useState(uuidv1());\r\n    const [amountOfOptionsSold, setAmountOfOptionsSold] = useState(0);\r\n    const [optionPriceSoldAt, setOptionPriceSoldAt] = useState(0);\r\n    const [totalProfit, setTotalProfit] = useState(0);\r\n    const [totalReturn, setTotalReturn] = useState(0);\r\n    const [newTable, setNewTable] = useState(listOfOptions);\r\n    const [winTrades, setWinTrades] = useState([]);\r\n    const [loseTrades, setLoseTrades] = useState([]);\r\n    const [winPercents, setWinPercents] = useState([]);\r\n    const [losePercents, setLosePercents] = useState([]);\r\n\r\n\r\n    const value = {\r\n        name,\r\n        setName,\r\n        price,\r\n        setPrice,\r\n        amountOfOptions,\r\n        setAmountOfOptions,\r\n        totalAmountSpent,\r\n        setTotalAmountSpent,\r\n        listOfOptions,\r\n        setListOfOptions,\r\n        id,\r\n        setId,\r\n        amountOfOptionsSold,\r\n        setAmountOfOptionsSold,\r\n        optionPriceSoldAt,\r\n        setOptionPriceSoldAt,\r\n        totalProfit,\r\n        setTotalProfit,\r\n        totalReturn,\r\n        setTotalReturn,\r\n        newTable,\r\n        setNewTable,\r\n        winTrades,\r\n        setWinTrades,\r\n        loseTrades,\r\n        setLoseTrades,\r\n        winPercents,\r\n        setWinPercents,\r\n        losePercents,\r\n        setLosePercents\r\n    };\r\n\r\n    return (\r\n        <OptionsContext.Provider value={value}>\r\n            { props.children}\r\n        </OptionsContext.Provider>\r\n    );\r\n}","import React, { useEffect, useContext } from 'react';\r\nimport { OptionsContext } from './OptionsContext';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\n\r\n\r\nexport default function Inputs(lists) {\r\n\r\n    const clock = new Date().toLocaleDateString();\r\n\r\n    const {\r\n        name,\r\n        setName,\r\n        price,\r\n        setPrice,\r\n        amountOfOptions,\r\n        id,\r\n        setId,\r\n        setAmountOfOptions,\r\n        totalAmountSpent,\r\n        setTotalAmountSpent,\r\n        listOfOptions,\r\n        setListOfOptions,\r\n        amountOfOptionsSold,\r\n        setAmountOfOptionsSold,\r\n        optionPriceSoldAt,\r\n        setOptionPriceSoldAt,\r\n        totalProfit,\r\n        setTotalProfit,\r\n    } = useContext(OptionsContext);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        e.target.reset();\r\n        addListOfOptions(\r\n            {\r\n                clock,\r\n                name,\r\n                price,\r\n                amountOfOptions,\r\n                totalAmountSpent,\r\n                amountOfOptionsSold,\r\n                optionPriceSoldAt,\r\n                totalProfit,\r\n                id\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    const alertOverOptions = (e) => {\r\n        if (amountOfOptions < amountOfOptionsSold) {\r\n            return setAmountOfOptionsSold(0)\r\n        }\r\n    }\r\n\r\n    alertOverOptions()\r\n\r\n\r\n    const getInputValue = (hookSetter) => (e) => {\r\n        let { value } = e.target;\r\n        return hookSetter(value)\r\n    }\r\n\r\n    const addListOfOptions = (lists) => {\r\n        setListOfOptions([...listOfOptions, lists])\r\n        setId(uuidv1())\r\n    }\r\n\r\n    useEffect(() => {\r\n        let getOptions = localStorage.getItem('options');\r\n        if (getOptions) {\r\n            setListOfOptions(JSON.parse(getOptions))\r\n        } else return null\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('options', JSON.stringify(listOfOptions))\r\n\r\n    }, [listOfOptions])\r\n\r\n    useEffect(() => {\r\n        setTotalAmountSpent((price * amountOfOptions) * 100)\r\n        setTotalProfit((optionPriceSoldAt - price) * (amountOfOptionsSold * 100))\r\n    })\r\n\r\n\r\n    const deleteOption = (id) => {\r\n        const deleteItem = listOfOptions.filter(option => {\r\n            return option.id !== id;\r\n        })\r\n        setListOfOptions(deleteItem)\r\n    }\r\n\r\n    return (\r\n        <div className=\"formoutputs\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" className=\"input stockname\" placeholder=\"Enter Stock Symbol\" onChange={getInputValue(setName)} />\r\n                <input type=\"text\" className=\"input stockprice\" placeholder=\"Enter Option Price\" onChange={getInputValue(setPrice)} />\r\n                <input type=\"text\" className=\"input stockamount\" placeholder=\"Enter Number Of Option(s)\" onChange={getInputValue(setAmountOfOptions)} />\r\n                <input type=\"text\" className=\"input stockpricesold\" placeholder=\"Enter Option Price Sold\" onChange={getInputValue(setOptionPriceSoldAt)} />\r\n                <input type=\"text\" className=\"input stockamountsold\" placeholder=\"Enter Number Of Option(s) Sold\" onChange={getInputValue(setAmountOfOptionsSold)} />\r\n                <button type=\"submit\" className=\"btn\">Submit</button>\r\n            </form>\r\n            <div className=\"outputs\" >\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>Date</th>\r\n                            <th>Stock Name</th>\r\n                            <th>Price Of Option</th>\r\n                            <th>Number Of Options</th>\r\n                            <th>Total Amount Spent</th>\r\n                            <th>Option Sold At</th>\r\n                            <th>Amount Of Options Sold</th>\r\n                            <th>Proft</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {listOfOptions.map((option) => {\r\n                        return (\r\n                            <tbody key={uuidv1()}>\r\n                                <tr>\r\n                                    <td title=\"delete\" onClick={() => deleteOption(option.id)}><span className=\"delete\">x</span></td>\r\n                                    <td>{option.clock}</td>\r\n                                    <td>{option.name.toUpperCase()}</td>\r\n                                    <td>${option.price}</td>\r\n                                    <td>{option.amountOfOptions}</td>\r\n                                    <td>${option.totalAmountSpent.toFixed(2)}</td>\r\n                                    <td>${option.optionPriceSoldAt}</td>\r\n                                    <td>{option.amountOfOptionsSold}</td>\r\n                                    <td style={{ color: option.totalProfit >= 0 ? 'green' : 'red' }}>${option.totalProfit.toFixed(2)}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        )\r\n                    })}\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { OptionsContext } from './OptionsContext';\r\n\r\n\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n    const {\r\n        listOfOptions,\r\n        setListOfOptions,\r\n        totalReturn,\r\n        setTotalReturn,\r\n        newTable,\r\n        setNewTable,\r\n    } = useContext(OptionsContext);\r\n\r\n    const getTotal = () => {\r\n        const newProfitArr = []\r\n        for (let i = 0; i < listOfOptions.length; i++) {\r\n            newProfitArr.push(listOfOptions[i].totalProfit)\r\n        }\r\n\r\n        return newProfitArr.reduce((accumulator, currentValue) => {\r\n            if (isNaN(accumulator) || isNaN(currentValue)) {\r\n                return accumulator;\r\n            }\r\n            else return accumulator + currentValue\r\n        }, 0);\r\n    }\r\n    useEffect(() => {\r\n        setTotalReturn(getTotal())\r\n\r\n    })\r\n\r\n    const gainOptionsTab = (option) => {\r\n        const filteredItem = option.filter(op => {\r\n            return op.totalProfit > 0;\r\n        }).map(option => {\r\n            return option\r\n        })\r\n        setNewTable(filteredItem)\r\n    }\r\n\r\n\r\n\r\n    const getTradeSummary = () => {\r\n        const tradeSummary = document.querySelector('.optionsummary');\r\n        tradeSummary.classList.toggle('transIn')\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <nav className=\"navbar\">\r\n            <h1 id=\"gains\">stock<span>ER</span></h1>\r\n            <h2 style={{ color: totalReturn >= 0 ? 'green' : 'red' }}>${totalReturn.toFixed(2)}</h2>\r\n            <ul>\r\n                <li onClick={getTradeSummary} className=\"tradingsummary\">Trade Summary</li>\r\n            </ul>\r\n        </nav >\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Navbar;","import React, { useContext, useEffect } from 'react'\r\nimport { OptionsContext } from './OptionsContext';\r\nimport Chart from \"react-google-charts\";\r\n\r\n\r\nexport default function OptionSummary() {\r\n\r\n    const {\r\n        listOfOptions,\r\n        winTrades,\r\n        setWinTrades,\r\n        loseTrades,\r\n        setLoseTrades,\r\n        winPercents,\r\n        setWinPercents,\r\n        losePercents,\r\n        setLosePercents\r\n    } = useContext(OptionsContext);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setWinTrades(listOfOptions.filter(options => {\r\n            return options.totalProfit > 0\r\n        }))\r\n        setLoseTrades(listOfOptions.filter(options => {\r\n            return options.totalProfit < 0\r\n        }))\r\n    }, [listOfOptions])\r\n\r\n\r\n    useEffect(() => {\r\n        setWinPercents((winTrades.length % listOfOptions.length))\r\n        setLosePercents((loseTrades.length % listOfOptions.length))\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"optionsummary\">\r\n            <Chart\r\n                width={'500px'}\r\n                height={'300px'}\r\n                chartType=\"PieChart\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={[\r\n                    ['Task', 'Hours per Day'],\r\n                    ['Winning Trades', winPercents],\r\n                    ['Losing Trades', losePercents],\r\n                ]}\r\n                options={{\r\n\r\n                    legend: {\r\n                        textStyle: {\r\n                            color: 'white',\r\n                            fontSize: '12'\r\n                        }\r\n                    },\r\n                    titleTextStyle: {\r\n                        color: 'white',\r\n                        fontSize: '20',\r\n                        fontName: 'Fugaz One'\r\n                    },\r\n                    title: 'Trade Summary',\r\n                    size: '2rem',\r\n                    backgroundColor: 'transparent',\r\n                    colors: ['rgb(52, 38, 175)', 'red'],\r\n                    fontFamily: 'Fugaz One',\r\n                    is3D: true,\r\n                }}\r\n                rootProps={{ 'data-testid': '1' }}\r\n            />\r\n\r\n            <div className=\"trades\">\r\n                <p className=\"numtrades\">\r\n                    You have made <span style={{ fontFamily: 'Fugaz One', color: 'rgb(52, 38, 175)' }}>{listOfOptions.length}</span> trades\r\n            </p>\r\n\r\n                <p className=\"numtrades\">\r\n                    You have made <span style={{ color: 'green', fontFamily: 'Fugaz One' }}> {winTrades.length}</span> profitable trade(s)\r\n                </p>\r\n\r\n                <p className=\"numtrades\">\r\n                    You have made <span style={{ color: 'red', fontFamily: 'Fugaz One' }}> {loseTrades.length}</span> losing trade(s)\r\n                </p>\r\n\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Inputs from './Inputs';\nimport Navbar from './Navbar';\nimport OptionSummary from './OptionSummary';\nimport { OptionsProvider } from './OptionsContext';\n\n\n\n\nfunction App() {\n\n  return (\n    <OptionsProvider>\n      <div className=\"App\">\n        < Navbar />\n        < Inputs />\n        < OptionSummary />\n      </div>\n    </OptionsProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}