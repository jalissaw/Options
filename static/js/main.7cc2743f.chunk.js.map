{"version":3,"sources":["Transactions.js","Income.js","App.js","serviceWorker.js","index.js"],"names":["Transactions","props","useState","expenses","setExpense","amount","setAmount","id","listOfTrans","setListofTrans","total","setTotal","getValue","hookSetter","e","value","target","addExpense","expenseObject","useEffect","length","map","list","Math","abs","reduce","acc","currentValue","Number","className","onSubmit","preventDefault","getBalance","type","name","placeholder","onChange","autoComplete","style","color","trans","i","key","onClick","objExpense","filter","deleteExpense","Income","toLocaleString","App","setState","prevState","balance","currentVal","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cc2743f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst Transactions = (props) => {\r\n\r\n\r\n    const [expenses, setExpense] = useState([])\r\n    const [amount, setAmount] = useState([])\r\n    const [id, setId] = useState([])\r\n    const [listOfTrans, setListofTrans] = useState([])\r\n    const [total, setTotal] = useState([0])\r\n\r\n    //fires on click or enter\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addExpense({\r\n            amount,\r\n            expenses,\r\n            id\r\n        });\r\n\r\n        setAmount('');\r\n        setExpense('');\r\n        props.getBalance(-Math.abs(amount))\r\n    }\r\n\r\n\r\n    //get value of inputs\r\n    const getValue = (hookSetter) => (e) => {\r\n        let { value } = e.target;\r\n        return hookSetter(value)\r\n    }\r\n    // turn amount and expense into objects and put them setListofTranas\r\n    const addExpense = (expenseObject) => {\r\n        setListofTrans([...listOfTrans, expenseObject])\r\n\r\n    }\r\n\r\n    // get total amount of listoftrans\r\n    const getTotalExpenses = () => {\r\n\r\n        if (listOfTrans.length >= 0) {\r\n            let listAmount = listOfTrans.map(list => {\r\n                if (list.amount) {\r\n                    return -Math.abs(list.amount);\r\n                } else {\r\n                    return 0;\r\n                }\r\n            })\r\n\r\n            return listAmount.reduce((acc, currentValue) => {\r\n                return Number(acc) + Number(currentValue)\r\n\r\n            }, 0)\r\n        } else return 0\r\n\r\n    }\r\n\r\n    //update amount total on click\r\n    useEffect(() => {\r\n        setTotal(getTotalExpenses())\r\n    }, [listOfTrans])\r\n\r\n\r\n    const deleteExpense = (i) => {\r\n        let objExpense = i;\r\n        setListofTrans(\r\n            listOfTrans.filter((list) => {\r\n                if (list.id === objExpense) {\r\n                    props.getBalance(Math.abs(list.amount)); // <-- add the amount back to balance\r\n                    return false;\r\n                }\r\n                return true\r\n            })\r\n        );\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"transactionsExpense\">\r\n            <div className=\"expenses\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"expense\"\r\n                        className=\"formfield\"\r\n                        name=\"expense\"\r\n                        placeholder=\"Expense...\"\r\n                        value={expenses}\r\n                        onChange={getValue(setExpense)}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"amount\"\r\n                        className=\"formfield\"\r\n                        name=\"amount\"\r\n                        placeholder=\"Amount...\"\r\n                        value={amount}\r\n                        onChange={getValue(setAmount)}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <button type=\"submit\" className=\"btnForm btnExpense\">Submit</button>\r\n                </form>\r\n            </div>\r\n            <div className=\"finalbalance \">\r\n                <div className=\"finalexpense final\">\r\n\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th style={{ color: total < 0 ? 'red' : 'white' }}>Total Expenses: ${total}</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>EXPENSES</td>\r\n                                <td>AMOUNT</td>\r\n                            </tr>\r\n                        </tbody>\r\n                        {\r\n                            listOfTrans.map((trans, i) => {\r\n                                return (\r\n                                    <tbody key={(trans.id)}>\r\n                                        <tr key={trans.id++}>\r\n                                            <td>{trans.expenses}</td>\r\n                                            <td>{\"$\" + trans.amount}</td>\r\n                                            <td>\r\n                                                <button className=\"btnRemove btnExpenseTable\" onClick={() => deleteExpense(trans.id)}>\r\n                                                    <i className=\"fas fa-trash-alt\"></i>\r\n                                                </button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                )\r\n                            })\r\n                        }\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Transactions","import React, { useState, useEffect } from 'react';\r\n\r\n\r\n\r\nconst Income = (props) => {\r\n\r\n    const [expenses, setExpense] = useState([])\r\n    const [amount, setAmount] = useState([])\r\n    const [id, setId] = useState([])\r\n    const [listOfTrans, setListofTrans] = useState([])\r\n    const [total, setTotal] = useState([0])\r\n\r\n\r\n    //fires on click or enter\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        addExpense({\r\n            amount,\r\n            expenses,\r\n            id\r\n        });\r\n        props.getBalance(amount)\r\n        setAmount('')\r\n        setExpense('')\r\n    }\r\n\r\n    //get value of inputs\r\n    const getValue = (hookSetter) => (e) => {\r\n        let { value } = e.target;\r\n        return hookSetter(value)\r\n    }\r\n    // turn amount and expense into objects and put them setListofTranas\r\n    const addExpense = (expenseObject) => {\r\n        setListofTrans([...listOfTrans, expenseObject])\r\n\r\n    }\r\n\r\n    // get total amount of listoftrans\r\n    const getTotalExpenses = () => {\r\n\r\n        if (listOfTrans.length > 0) {\r\n            let listAmount = listOfTrans.map(list => {\r\n                if (list.amount) {\r\n                    return list.amount;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            })\r\n\r\n            return listAmount.reduce((acc, currentValue) => {\r\n                return Number(acc) + Number(currentValue)\r\n\r\n            }, 0)\r\n        } else return 0\r\n\r\n    }\r\n\r\n\r\n    //update amount total on click\r\n    useEffect(() => {\r\n        setTotal(getTotalExpenses())\r\n    }, [listOfTrans])\r\n\r\n    // delete item from array\r\n    const deleteExpense = (i) => {\r\n        let objExpense = i;\r\n        setListofTrans(\r\n            listOfTrans.filter((list) => {\r\n                if (list.id === objExpense) {\r\n                    props.getBalance(-list.amount)\r\n                    return false;\r\n                }\r\n                return true\r\n            })\r\n        );\r\n    };\r\n\r\n    return (\r\n\r\n        <div className=\"transactionsIncome\">\r\n            <div className=\"expenses\">\r\n                <span>{amount === '' || expenses === '' ? <p>Please Fill Out Input Fields</p> : ''}</span>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"expense\"\r\n                        className=\"formfield\"\r\n                        name=\"expense\"\r\n                        placeholder=\"Income...\"\r\n                        value={expenses}\r\n                        onChange={getValue(setExpense)}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"amount\"\r\n                        className=\"formfield\"\r\n                        name=\"amount\"\r\n                        placeholder=\"Amount...\"\r\n                        value={amount}\r\n                        onChange={getValue(setAmount)}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <button type=\"submit\" className=\"btnForm btnIncome\">Submit</button>\r\n                </form>\r\n            </div>\r\n            <div className=\"finalbalance \">\r\n                <div className=\"finalexpense final\">\r\n\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th style={{ color: total > 0 ? 'green' : 'white' }}>Total Income: ${total.toLocaleString()}</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>TYPE</td>\r\n                                <td>INCOME</td>\r\n                            </tr>\r\n                        </tbody>\r\n                        {\r\n                            listOfTrans.map((trans, i) => {\r\n                                return (\r\n                                    <tbody key={(trans.id)}>\r\n                                        <tr key={trans.id++}>\r\n                                            <td>{trans.expenses}</td>\r\n                                            <td>{\"$\" + trans.amount}</td>\r\n                                            <td>\r\n                                                <button className=\"btnRemove btnIncomeTable\" onClick={() => deleteExpense(trans.id)}>\r\n                                                    <i className=\"fas fa-trash-alt\"></i>\r\n                                                </button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                )\r\n                            })\r\n                        }\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Income","import React from 'react';\nimport Transactions from './Transactions.js';\nimport Income from './Income.js'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: [0]\n    }\n\n  }\n  getBalance = (total) => {\n    this.setState((prevState) => ({\n      balance: [prevState.balance, total].reduce((acc, currentVal) => {\n        return Number(acc) + Number(currentVal)\n      }, 0)\n    }));\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\" >\n        <div className=\"count\">\n          <h2 className=\"balancetitle\">Your Balance</h2>\n          <h1 className=\"balance\" style={{ color: this.state.balance >= 0 ? 'green' : 'red' }}>${this.state.balance.toLocaleString()}</h1>\n        </div>\n        <div className=\"transactionsapp\">\n          <Transactions getBalance={(total) => this.getBalance([total])} />\n          <Income getBalance={(total) => this.getBalance([total])} />\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}